package com.evaradrip.commerce.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UserAddressAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAddressAllPropertiesEquals(UserAddress expected, UserAddress actual) {
        assertUserAddressAutoGeneratedPropertiesEquals(expected, actual);
        assertUserAddressAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAddressAllUpdatablePropertiesEquals(UserAddress expected, UserAddress actual) {
        assertUserAddressUpdatableFieldsEquals(expected, actual);
        assertUserAddressUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAddressAutoGeneratedPropertiesEquals(UserAddress expected, UserAddress actual) {
        assertThat(actual)
            .as("Verify UserAddress auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAddressUpdatableFieldsEquals(UserAddress expected, UserAddress actual) {
        assertThat(actual)
            .as("Verify UserAddress relevant properties")
            .satisfies(a -> assertThat(a.getAddressType()).as("check addressType").isEqualTo(expected.getAddressType()))
            .satisfies(a -> assertThat(a.getFullName()).as("check fullName").isEqualTo(expected.getFullName()))
            .satisfies(a -> assertThat(a.getPhoneNumber()).as("check phoneNumber").isEqualTo(expected.getPhoneNumber()))
            .satisfies(a -> assertThat(a.getStreetAddress()).as("check streetAddress").isEqualTo(expected.getStreetAddress()))
            .satisfies(a -> assertThat(a.getStreetAddress2()).as("check streetAddress2").isEqualTo(expected.getStreetAddress2()))
            .satisfies(a -> assertThat(a.getCity()).as("check city").isEqualTo(expected.getCity()))
            .satisfies(a -> assertThat(a.getState()).as("check state").isEqualTo(expected.getState()))
            .satisfies(a -> assertThat(a.getZipCode()).as("check zipCode").isEqualTo(expected.getZipCode()))
            .satisfies(a -> assertThat(a.getCountry()).as("check country").isEqualTo(expected.getCountry()))
            .satisfies(a -> assertThat(a.getLandmark()).as("check landmark").isEqualTo(expected.getLandmark()))
            .satisfies(a -> assertThat(a.getIsDefault()).as("check isDefault").isEqualTo(expected.getIsDefault()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAddressUpdatableRelationshipsEquals(UserAddress expected, UserAddress actual) {
        assertThat(actual)
            .as("Verify UserAddress relationships")
            .satisfies(a -> assertThat(a.getUser()).as("check user").isEqualTo(expected.getUser()));
    }
}
