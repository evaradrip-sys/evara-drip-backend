package com.evaradrip.commerce.domain;

import static com.evaradrip.commerce.domain.AssertUtils.bigDecimalCompareTo;
import static com.evaradrip.commerce.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class ShippingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShippingAllPropertiesEquals(Shipping expected, Shipping actual) {
        assertShippingAutoGeneratedPropertiesEquals(expected, actual);
        assertShippingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShippingAllUpdatablePropertiesEquals(Shipping expected, Shipping actual) {
        assertShippingUpdatableFieldsEquals(expected, actual);
        assertShippingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShippingAutoGeneratedPropertiesEquals(Shipping expected, Shipping actual) {
        assertThat(actual)
            .as("Verify Shipping auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShippingUpdatableFieldsEquals(Shipping expected, Shipping actual) {
        assertThat(actual)
            .as("Verify Shipping relevant properties")
            .satisfies(a -> assertThat(a.getCarrier()).as("check carrier").isEqualTo(expected.getCarrier()))
            .satisfies(a -> assertThat(a.getTrackingNumber()).as("check trackingNumber").isEqualTo(expected.getTrackingNumber()))
            .satisfies(a -> assertThat(a.getEstimatedDelivery()).as("check estimatedDelivery").isEqualTo(expected.getEstimatedDelivery()))
            .satisfies(a ->
                assertThat(a.getActualDelivery())
                    .as("check actualDelivery")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getActualDelivery())
            )
            .satisfies(a ->
                assertThat(a.getShippingCost())
                    .as("check shippingCost")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getShippingCost())
            )
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShippingUpdatableRelationshipsEquals(Shipping expected, Shipping actual) {
        assertThat(actual)
            .as("Verify Shipping relationships")
            .satisfies(a -> assertThat(a.getOrder()).as("check order").isEqualTo(expected.getOrder()));
    }
}
