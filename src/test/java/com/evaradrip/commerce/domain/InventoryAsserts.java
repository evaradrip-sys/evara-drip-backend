package com.evaradrip.commerce.domain;

import static com.evaradrip.commerce.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class InventoryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryAllPropertiesEquals(Inventory expected, Inventory actual) {
        assertInventoryAutoGeneratedPropertiesEquals(expected, actual);
        assertInventoryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryAllUpdatablePropertiesEquals(Inventory expected, Inventory actual) {
        assertInventoryUpdatableFieldsEquals(expected, actual);
        assertInventoryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryAutoGeneratedPropertiesEquals(Inventory expected, Inventory actual) {
        assertThat(actual)
            .as("Verify Inventory auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryUpdatableFieldsEquals(Inventory expected, Inventory actual) {
        assertThat(actual)
            .as("Verify Inventory relevant properties")
            .satisfies(a -> assertThat(a.getQuantity()).as("check quantity").isEqualTo(expected.getQuantity()))
            .satisfies(a -> assertThat(a.getReservedQuantity()).as("check reservedQuantity").isEqualTo(expected.getReservedQuantity()))
            .satisfies(a -> assertThat(a.getWarehouse()).as("check warehouse").isEqualTo(expected.getWarehouse()))
            .satisfies(a ->
                assertThat(a.getLastRestocked())
                    .as("check lastRestocked")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getLastRestocked())
            )
            .satisfies(a -> assertThat(a.getReorderLevel()).as("check reorderLevel").isEqualTo(expected.getReorderLevel()))
            .satisfies(a -> assertThat(a.getReorderQuantity()).as("check reorderQuantity").isEqualTo(expected.getReorderQuantity()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryUpdatableRelationshipsEquals(Inventory expected, Inventory actual) {
        assertThat(actual)
            .as("Verify Inventory relationships")
            .satisfies(a -> assertThat(a.getProduct()).as("check product").isEqualTo(expected.getProduct()));
    }
}
