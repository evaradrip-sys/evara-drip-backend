package com.evaradrip.commerce.domain;

import static com.evaradrip.commerce.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class ReviewAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReviewAllPropertiesEquals(Review expected, Review actual) {
        assertReviewAutoGeneratedPropertiesEquals(expected, actual);
        assertReviewAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReviewAllUpdatablePropertiesEquals(Review expected, Review actual) {
        assertReviewUpdatableFieldsEquals(expected, actual);
        assertReviewUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReviewAutoGeneratedPropertiesEquals(Review expected, Review actual) {
        assertThat(actual)
            .as("Verify Review auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReviewUpdatableFieldsEquals(Review expected, Review actual) {
        assertThat(actual)
            .as("Verify Review relevant properties")
            .satisfies(a -> assertThat(a.getRating()).as("check rating").isEqualTo(expected.getRating()))
            .satisfies(a -> assertThat(a.getTitle()).as("check title").isEqualTo(expected.getTitle()))
            .satisfies(a -> assertThat(a.getComment()).as("check comment").isEqualTo(expected.getComment()))
            .satisfies(a -> assertThat(a.getHelpfulCount()).as("check helpfulCount").isEqualTo(expected.getHelpfulCount()))
            .satisfies(a -> assertThat(a.getNotHelpfulCount()).as("check notHelpfulCount").isEqualTo(expected.getNotHelpfulCount()))
            .satisfies(a -> assertThat(a.getVerifiedPurchase()).as("check verifiedPurchase").isEqualTo(expected.getVerifiedPurchase()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getResponse()).as("check response").isEqualTo(expected.getResponse()))
            .satisfies(a ->
                assertThat(a.getResponseDate())
                    .as("check responseDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getResponseDate())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReviewUpdatableRelationshipsEquals(Review expected, Review actual) {
        assertThat(actual)
            .as("Verify Review relationships")
            .satisfies(a -> assertThat(a.getProduct()).as("check product").isEqualTo(expected.getProduct()));
    }
}
