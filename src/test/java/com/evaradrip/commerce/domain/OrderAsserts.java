package com.evaradrip.commerce.domain;

import static com.evaradrip.commerce.domain.AssertUtils.bigDecimalCompareTo;
import static com.evaradrip.commerce.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class OrderAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderAllPropertiesEquals(Order expected, Order actual) {
        assertOrderAutoGeneratedPropertiesEquals(expected, actual);
        assertOrderAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderAllUpdatablePropertiesEquals(Order expected, Order actual) {
        assertOrderUpdatableFieldsEquals(expected, actual);
        assertOrderUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderAutoGeneratedPropertiesEquals(Order expected, Order actual) {
        assertThat(actual)
            .as("Verify Order auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderUpdatableFieldsEquals(Order expected, Order actual) {
        assertThat(actual)
            .as("Verify Order relevant properties")
            .satisfies(a -> assertThat(a.getOrderNumber()).as("check orderNumber").isEqualTo(expected.getOrderNumber()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a ->
                assertThat(a.getTotalAmount())
                    .as("check totalAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalAmount())
            )
            .satisfies(a ->
                assertThat(a.getSubtotalAmount())
                    .as("check subtotalAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getSubtotalAmount())
            )
            .satisfies(a ->
                assertThat(a.getTaxAmount()).as("check taxAmount").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getTaxAmount())
            )
            .satisfies(a ->
                assertThat(a.getShippingAmount())
                    .as("check shippingAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getShippingAmount())
            )
            .satisfies(a ->
                assertThat(a.getDiscountAmount())
                    .as("check discountAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getDiscountAmount())
            )
            .satisfies(a -> assertThat(a.getPaymentMethod()).as("check paymentMethod").isEqualTo(expected.getPaymentMethod()))
            .satisfies(a -> assertThat(a.getPaymentStatus()).as("check paymentStatus").isEqualTo(expected.getPaymentStatus()))
            .satisfies(a -> assertThat(a.getShippingMethod()).as("check shippingMethod").isEqualTo(expected.getShippingMethod()))
            .satisfies(a -> assertThat(a.getTrackingNumber()).as("check trackingNumber").isEqualTo(expected.getTrackingNumber()))
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()))
            .satisfies(a -> assertThat(a.getCancelReason()).as("check cancelReason").isEqualTo(expected.getCancelReason()))
            .satisfies(a -> assertThat(a.getReturnReason()).as("check returnReason").isEqualTo(expected.getReturnReason()))
            .satisfies(a ->
                assertThat(a.getRefundAmount())
                    .as("check refundAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getRefundAmount())
            )
            .satisfies(a ->
                assertThat(a.getEstimatedDeliveryDate()).as("check estimatedDeliveryDate").isEqualTo(expected.getEstimatedDeliveryDate())
            )
            .satisfies(a ->
                assertThat(a.getDeliveredDate())
                    .as("check deliveredDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getDeliveredDate())
            )
            .satisfies(a ->
                assertThat(a.getShippedDate())
                    .as("check shippedDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getShippedDate())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderUpdatableRelationshipsEquals(Order expected, Order actual) {
        assertThat(actual)
            .as("Verify Order relationships")
            .satisfies(a -> assertThat(a.getShippingAddress()).as("check shippingAddress").isEqualTo(expected.getShippingAddress()))
            .satisfies(a -> assertThat(a.getBillingAddress()).as("check billingAddress").isEqualTo(expected.getBillingAddress()))
            .satisfies(a -> assertThat(a.getUser()).as("check user").isEqualTo(expected.getUser()));
    }
}
