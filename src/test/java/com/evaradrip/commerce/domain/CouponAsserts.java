package com.evaradrip.commerce.domain;

import static com.evaradrip.commerce.domain.AssertUtils.bigDecimalCompareTo;
import static com.evaradrip.commerce.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class CouponAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCouponAllPropertiesEquals(Coupon expected, Coupon actual) {
        assertCouponAutoGeneratedPropertiesEquals(expected, actual);
        assertCouponAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCouponAllUpdatablePropertiesEquals(Coupon expected, Coupon actual) {
        assertCouponUpdatableFieldsEquals(expected, actual);
        assertCouponUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCouponAutoGeneratedPropertiesEquals(Coupon expected, Coupon actual) {
        assertThat(actual)
            .as("Verify Coupon auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCouponUpdatableFieldsEquals(Coupon expected, Coupon actual) {
        assertThat(actual)
            .as("Verify Coupon relevant properties")
            .satisfies(a -> assertThat(a.getCode()).as("check code").isEqualTo(expected.getCode()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getDiscountType()).as("check discountType").isEqualTo(expected.getDiscountType()))
            .satisfies(a ->
                assertThat(a.getDiscountValue())
                    .as("check discountValue")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getDiscountValue())
            )
            .satisfies(a ->
                assertThat(a.getValidFrom())
                    .as("check validFrom")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getValidFrom())
            )
            .satisfies(a ->
                assertThat(a.getValidUntil())
                    .as("check validUntil")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getValidUntil())
            )
            .satisfies(a -> assertThat(a.getMaxUses()).as("check maxUses").isEqualTo(expected.getMaxUses()))
            .satisfies(a -> assertThat(a.getCurrentUses()).as("check currentUses").isEqualTo(expected.getCurrentUses()))
            .satisfies(a ->
                assertThat(a.getMinOrderValue())
                    .as("check minOrderValue")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getMinOrderValue())
            )
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCouponUpdatableRelationshipsEquals(Coupon expected, Coupon actual) {
        assertThat(actual)
            .as("Verify Coupon relationships")
            .satisfies(a -> assertThat(a.getUsers()).as("check users").isEqualTo(expected.getUsers()));
    }
}
