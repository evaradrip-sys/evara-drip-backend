package com.evaradrip.commerce.domain;

import static com.evaradrip.commerce.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ProductVariantAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductVariantAllPropertiesEquals(ProductVariant expected, ProductVariant actual) {
        assertProductVariantAutoGeneratedPropertiesEquals(expected, actual);
        assertProductVariantAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductVariantAllUpdatablePropertiesEquals(ProductVariant expected, ProductVariant actual) {
        assertProductVariantUpdatableFieldsEquals(expected, actual);
        assertProductVariantUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductVariantAutoGeneratedPropertiesEquals(ProductVariant expected, ProductVariant actual) {
        assertThat(actual)
            .as("Verify ProductVariant auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductVariantUpdatableFieldsEquals(ProductVariant expected, ProductVariant actual) {
        assertThat(actual)
            .as("Verify ProductVariant relevant properties")
            .satisfies(a -> assertThat(a.getVariantSize()).as("check variantSize").isEqualTo(expected.getVariantSize()))
            .satisfies(a -> assertThat(a.getColor()).as("check color").isEqualTo(expected.getColor()))
            .satisfies(a -> assertThat(a.getSku()).as("check sku").isEqualTo(expected.getSku()))
            .satisfies(a -> assertThat(a.getStockCount()).as("check stockCount").isEqualTo(expected.getStockCount()))
            .satisfies(a ->
                assertThat(a.getPriceAdjustment())
                    .as("check priceAdjustment")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getPriceAdjustment())
            )
            .satisfies(a -> assertThat(a.getBarcode()).as("check barcode").isEqualTo(expected.getBarcode()))
            .satisfies(a ->
                assertThat(a.getWeight()).as("check weight").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getWeight())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductVariantUpdatableRelationshipsEquals(ProductVariant expected, ProductVariant actual) {
        assertThat(actual)
            .as("Verify ProductVariant relationships")
            .satisfies(a -> assertThat(a.getProduct()).as("check product").isEqualTo(expected.getProduct()));
    }
}
