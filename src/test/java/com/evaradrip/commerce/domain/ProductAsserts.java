package com.evaradrip.commerce.domain;

import static com.evaradrip.commerce.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ProductAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAllPropertiesEquals(Product expected, Product actual) {
        assertProductAutoGeneratedPropertiesEquals(expected, actual);
        assertProductAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAllUpdatablePropertiesEquals(Product expected, Product actual) {
        assertProductUpdatableFieldsEquals(expected, actual);
        assertProductUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAutoGeneratedPropertiesEquals(Product expected, Product actual) {
        assertThat(actual)
            .as("Verify Product auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductUpdatableFieldsEquals(Product expected, Product actual) {
        assertThat(actual)
            .as("Verify Product relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getPrice()))
            .satisfies(a ->
                assertThat(a.getOriginalPrice())
                    .as("check originalPrice")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getOriginalPrice())
            )
            .satisfies(a -> assertThat(a.getSku()).as("check sku").isEqualTo(expected.getSku()))
            .satisfies(a -> assertThat(a.getIsNew()).as("check isNew").isEqualTo(expected.getIsNew()))
            .satisfies(a -> assertThat(a.getIsOnSale()).as("check isOnSale").isEqualTo(expected.getIsOnSale()))
            .satisfies(a ->
                assertThat(a.getRating()).as("check rating").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getRating())
            )
            .satisfies(a -> assertThat(a.getReviewsCount()).as("check reviewsCount").isEqualTo(expected.getReviewsCount()))
            .satisfies(a -> assertThat(a.getStockCount()).as("check stockCount").isEqualTo(expected.getStockCount()))
            .satisfies(a -> assertThat(a.getInStock()).as("check inStock").isEqualTo(expected.getInStock()))
            .satisfies(a -> assertThat(a.getFeatures()).as("check features").isEqualTo(expected.getFeatures()))
            .satisfies(a -> assertThat(a.getMetaTitle()).as("check metaTitle").isEqualTo(expected.getMetaTitle()))
            .satisfies(a -> assertThat(a.getMetaDescription()).as("check metaDescription").isEqualTo(expected.getMetaDescription()))
            .satisfies(a -> assertThat(a.getMetaKeywords()).as("check metaKeywords").isEqualTo(expected.getMetaKeywords()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a ->
                assertThat(a.getWeight()).as("check weight").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getWeight())
            )
            .satisfies(a -> assertThat(a.getDimensions()).as("check dimensions").isEqualTo(expected.getDimensions()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductUpdatableRelationshipsEquals(Product expected, Product actual) {
        assertThat(actual)
            .as("Verify Product relationships")
            .satisfies(a -> assertThat(a.getPromotions()).as("check promotions").isEqualTo(expected.getPromotions()))
            .satisfies(a -> assertThat(a.getBrand()).as("check brand").isEqualTo(expected.getBrand()))
            .satisfies(a -> assertThat(a.getCategory()).as("check category").isEqualTo(expected.getCategory()))
            .satisfies(a -> assertThat(a.getWishlisteds()).as("check wishlisteds").isEqualTo(expected.getWishlisteds()))
            .satisfies(a ->
                assertThat(a.getApplicablePromotions()).as("check applicablePromotions").isEqualTo(expected.getApplicablePromotions())
            )
            .satisfies(a ->
                assertThat(a.getFeaturedInCategories()).as("check featuredInCategories").isEqualTo(expected.getFeaturedInCategories())
            );
    }
}
