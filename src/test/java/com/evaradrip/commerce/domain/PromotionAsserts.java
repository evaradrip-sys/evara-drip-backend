package com.evaradrip.commerce.domain;

import static com.evaradrip.commerce.domain.AssertUtils.bigDecimalCompareTo;
import static com.evaradrip.commerce.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class PromotionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPromotionAllPropertiesEquals(Promotion expected, Promotion actual) {
        assertPromotionAutoGeneratedPropertiesEquals(expected, actual);
        assertPromotionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPromotionAllUpdatablePropertiesEquals(Promotion expected, Promotion actual) {
        assertPromotionUpdatableFieldsEquals(expected, actual);
        assertPromotionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPromotionAutoGeneratedPropertiesEquals(Promotion expected, Promotion actual) {
        assertThat(actual)
            .as("Verify Promotion auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPromotionUpdatableFieldsEquals(Promotion expected, Promotion actual) {
        assertThat(actual)
            .as("Verify Promotion relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getPromoCode()).as("check promoCode").isEqualTo(expected.getPromoCode()))
            .satisfies(a -> assertThat(a.getDiscountType()).as("check discountType").isEqualTo(expected.getDiscountType()))
            .satisfies(a ->
                assertThat(a.getDiscountValue())
                    .as("check discountValue")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getDiscountValue())
            )
            .satisfies(a ->
                assertThat(a.getMinPurchaseAmount())
                    .as("check minPurchaseAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getMinPurchaseAmount())
            )
            .satisfies(a ->
                assertThat(a.getMaxDiscountAmount())
                    .as("check maxDiscountAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getMaxDiscountAmount())
            )
            .satisfies(a ->
                assertThat(a.getStartDate())
                    .as("check startDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getStartDate())
            )
            .satisfies(a ->
                assertThat(a.getEndDate()).as("check endDate").usingComparator(zonedDataTimeSameInstant).isEqualTo(expected.getEndDate())
            )
            .satisfies(a -> assertThat(a.getUsageLimit()).as("check usageLimit").isEqualTo(expected.getUsageLimit()))
            .satisfies(a -> assertThat(a.getUsageCount()).as("check usageCount").isEqualTo(expected.getUsageCount()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a ->
                assertThat(a.getApplicableCategories()).as("check applicableCategories").isEqualTo(expected.getApplicableCategories())
            )
            .satisfies(a -> assertThat(a.getExcludedProducts()).as("check excludedProducts").isEqualTo(expected.getExcludedProducts()))
            .satisfies(a -> assertThat(a.getTermsAndConditions()).as("check termsAndConditions").isEqualTo(expected.getTermsAndConditions())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPromotionUpdatableRelationshipsEquals(Promotion expected, Promotion actual) {
        assertThat(actual)
            .as("Verify Promotion relationships")
            .satisfies(a -> assertThat(a.getApplicableProducts()).as("check applicableProducts").isEqualTo(expected.getApplicableProducts())
            )
            .satisfies(a -> assertThat(a.getProducts()).as("check products").isEqualTo(expected.getProducts()));
    }
}
